<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        DPhDEtBewG166+fI4MYK+euPf5Gffvq73Llzx1PoZ9bPrvdA74WN70C/+wG/d59/zwsgHAloCOg2Z/yZ
        8urOFfK/f/8sXv1HP7veA70XNr6DQY8/+wjAavQxX851r5D//PMfnhWAfna9B3oveCYQAAJAAIAAEAAC
        AASAABAAIAAEgAAAASAABAAIAAEgAEAACAABAAJAAAgAEAACQACAABAAAgAEgAAQACAABIAAAAEgAAQA
        CAABIABAAAgAAQACQAAIABAAAkAACICbgAAQAAIABIAAEAAgAASAAAABIAAEAAgAASAAQAAIAAEAAkAA
        CAAQAAJAAIAAEAACAASAABAAIAAEgAAAASAABAAIAAEgAEAACAABAAJAAAgAEAACQACAABAAAkAACAAB
        IAAEgAAQAAJAAAiAZwIBIAAEAAgAASAAQAAIAAEAAkAACAAQAAJAAIAAEAACAASAABAAIAAEgAAAASAA
        BAAIAAEgAEAACAABAAJAAAgAEAACQACAABAAAgAEgAAQACAABIAAAAEgAASAALgJCAABIABAAAgAAQAC
        QAAIABAAAkAAgAAQAAKA1Angv//62bMC0M+OABCARwWQKS9vXyZ3/vajaQjaG3oJ/cz62fUe6L3gmUAA
        nuNswGcagPaCXkQ/u94DngUE4OlIQENgb0LPjwAAAAEAAAIAAAQAAAgAABAAACAAAEAAAIAAAAABAAAC
        AAAEAAAIAAAQAAAgAABAAACAAAAAAQAAAgBAAACAAAAAAQAAAgAABAAACAAAEAAAIAAAQAAAgAAAAAEA
        wHjj/xb21f7N0lZ6AAAAAElFTkSuQmCC
</value>
  </data>
</root>